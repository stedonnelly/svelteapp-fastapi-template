services:
  db:
    image: postgres:16-alpine
    container_name: template_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-app_db}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-app_db}"]
      interval: 5s
      timeout: 5s
      retries: 20
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: template_backend
    restart: unless-stopped
    env_file:
      - ./.env.dev
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8000:8000"
    # Mount only source for autoreload; keep site-packages inside the image for speed
    volumes:
      - ./backend/app:/app/app:rw
      - ./backend/alembic:/app/alembic:rw
      - ./backend/alembic.ini:/app/alembic.ini:rw
    command: >
      bash -lc "
      alembic upgrade head &&
      uvicorn app.main:app --host ${BACKEND_HOST:-0.0.0.0} --port ${BACKEND_PORT:-8000} --reload
      "
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "python -c \"import urllib.request,sys; \
          sys.exit(0 if urllib.request.urlopen('http://127.0.0.1:8000/api/v1/health/healthz', timeout=3).getcode()==200 else 1)\""
        ]
      interval: 10s
      timeout: 5s
      retries: 30

  web:
    image: node:20-alpine
    container_name: template_web
    working_dir: /app
    restart: unless-stopped
    env_file:
      - ./.env.dev
    depends_on:
      backend:
        condition: service_healthy
    ports:
      - "5173:5173"
    # Persist node_modules with a named volume; mount your code read/write
    volumes:
      - ./web:/app:rw
      - web_node_modules:/app/node_modules
    command: >
      sh -lc "
      npm ci && npm run dev -- --host 0.0.0.0 --port 5173
      "

volumes:
  db_data:
  web_node_modules:
